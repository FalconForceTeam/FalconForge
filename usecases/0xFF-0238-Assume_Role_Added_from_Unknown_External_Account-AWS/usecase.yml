name: AWS Assume Role Added from Unknown External Account
id: 0xFF-0238-Assume_Role_Added_from_Unknown_External_Account-AWS
tags:
  - AWS
  - SuspiciousBehavior
os_family:
  - N/A
fp_rate: Low
severity: Medium
attack:
  - {tactic: 'TA0003', technique: T1098, sub_technique: "001"}
data_sources:
  - provider: AWS
    event_id: CreateRole
    table_name: AWSCloudTrail
    attack_data_source: User Account
    attack_data_component: User Account Modification
  - provider: AWS
    event_id: UpdateAssumeRolePolicy
    table_name: AWSCloudTrail
    attack_data_source: User Account
    attack_data_component: User Account Modification
permission_required: User
technical_description: >
  This query searches for roles being created or updated where `sts:AssumeRole` is granted with an external AWS account. If the external AWS account id is not in
  a list of known accounts an alert is raised.
description: >
  When an attacker gains access to an account with access to AWS, they might abuse that account to grant the 'AssumeRole' privilege to an external AWS account.
  Once this privilege is assigned, the external account can be used to access the role and perform actions in the compromised AWS account.
considerations: >
  The rule requires setting up a list of known trusted AWS accounts.
false_positives: >
  There might be sharing of resources with external accounts for business reasons. Such sharing will have to be filtered.
blindspots: >
  None known.
response_plan: >
  Confirm if the user responsible for the providing external access to the role has done so for a valid business reason.
references:
  - https://github.com/DataDog/stratus-red-team
change_log:
  - {version: '1.2', date: '2022-08-31', impact: minor, message: Entity mapping added.}
  - {version: '1.1', date: '2022-02-22', impact: minor, message: 'Use ingestion_time for event selection and include de-duplication logic.' }
  - {version: '1.0', date: '2022-02-02', impact: major, message: Initial version.}
detection_query:
  language: Kusto
  platform: Sentinel
  deployment_variables:
    query_frequency: PT1H
    query_period: PT2H
    entity_mapping:
      - Account:
          Name: UserAccount
  query: |
    let timeframe = 2*1h;
    let TrustedAccounts= dynamic([]);
    AWSCloudTrail
    | where ingestion_time() >= ago(timeframe)
    | where EventName in ("CreateRole","UpdateAssumeRolePolicy")
    | extend AssumeRoleDocument=iif(EventName == "CreateRole", parse_json(RequestParameters).assumeRolePolicyDocument, parse_json(RequestParameters).policyDocument)
    | extend Statement=parse_json(tostring(AssumeRoleDocument)).Statement
    | mv-expand Statement
    | where Statement.Action =~ "sts:AssumeRole"
    | where Statement.Effect =~ "Allow"
    | mv-expand AddedAccount=Statement.Principal.AWS
    | where not(isempty(AddedAccount))
    | extend AddedAccount=iif(AddedAccount contains "*", "*", AddedAccount)
    | extend AddedAccount=iif(AddedAccount startswith "arn:", split(AddedAccount, ":")[4], AddedAccount)
    | where not(AddedAccount == UserIdentityAccountId)
    | where not(AddedAccount in (TrustedAccounts))
    | project-reorder AddedAccount
    // Begin client-specific filter.
    // End client-specific filter.
    | extend UserAccount=tostring(split(UserIdentityArn, "/")[-1])