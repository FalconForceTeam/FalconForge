name: LSASS Dumping using Debug Privileges
id: 0xFF-0241-LSASS_Dumping_using_Debug_Privileges-Win
tags:
  - CredentialDumping
os_family:
  - WindowsEndpoint
  - WindowsServer
fp_rate: Medium
severity: High
attack:
  - {tactic: 'TA0006', technique: T1003, sub_technique: '001'}
  - {tactic: 'TA0002', technique: T1106}
data_sources:
  - provider: MicrosoftThreatProtection
    event_id: OpenProcessApiCall
    table_name: DeviceEvents
    attack_data_source: Process
    attack_data_component: Process Access
permission_required: Administrator
technical_description: >
  This query searches for a process that requests the `SeDebugPrivilege` privilege and opens LSASS memory using specific permission
  0x1fffff which represents `PROCESS_ALL_ACCESS`.
description: >
  Attackers can extract credentials from LSASS memory by performing a memory dump of the LSASS process. Many methods of
  dumping LSASS memory require the `SeDebugPrivilege` privilege and use the `WriteMiniDump` function which opens the targeted process
  using `PROCESS_ALL_ACCESS` permissions.
considerations: >
  None.
false_positives: >
  There are some applications that perform these actions for legitimate purposes. One example is Procmon by Sysinternals.
blindspots: >
  Some tools can be modified to change the indicators of compromise by altering the permissions used when the LSASS
  process is opened.
response_plan: >
  Investigate what triggered the LSASS memory access. Investigate the system for other signs of compromise.
references:
  - https://github.com/bleedx-93/NihilistGuy
  - https://downloads.volatilityfoundation.org//omfw/2012/OMFW2012_Gurkok.pdf
change_log:
  - {version: '1.3', date: '2022-12-13', impact: minor, message: 'Removed records with empty SHA1 to avoid false positives.' }
  - {version: '1.2', date: '2022-11-07', impact: minor, message: 'Added extra filters for false positives caused by a specific commandline argument of tasklist.' }
  - {version: '1.1', date: '2022-02-22', impact: minor, message: 'Use ingestion_time for event selection and include de-duplication logic.' }
  - {version: '1.0', date: '2022-02-02', impact: major, message: Initial version.}
detection_query:
  language: Kusto
  platform: M365 Security
  alternate_platforms:
    - Sentinel
  deployment_variables:
    query_frequency: PT1H
    entity_mapping:
      machine: DeviceId
      user: InitiatingProcessAccountUpn
  query: |
    let timeframe = 2*1h;
    let SeDebugPrivilege = binary_shift_left(1, 20); // Value for SeDebugPrivilege is 2**20 = 0x100000.
    let LSASSOpen=materialize (
        DeviceEvents
        | where ingestion_time() >= ago(timeframe)
        | where ActionType == "OpenProcessApiCall"
        | where FileName =~ "lsass.exe"
        | extend AccessRights=parse_json(AdditionalFields).DesiredAccess
        | where AccessRights == 0x1fffff // PROCESS_ALL_ACCESS.
        | summarize by DeviceId, InitiatingProcessId, InitiatingProcessSHA1
    );
    DeviceEvents
    | where ingestion_time() >= ago(timeframe)
    | where ActionType == "ProcessPrimaryTokenModified"
    | where isnotempty(InitiatingProcessSHA1)
    // Look for processes that request debug privilege that also opened LSASS
    | where InitiatingProcessSHA1 in ((LSASSOpen | project InitiatingProcessSHA1)) // Speeds up the query.
    | join kind=inner LSASSOpen on DeviceId, InitiatingProcessSHA1, InitiatingProcessId
    // Check that debug privilege is enabled.
    | extend AdditionalFields=parse_json(AdditionalFields)
    | extend CurrentTokenPrivEnabled = toint(AdditionalFields.CurrentTokenPrivEnabled)
    | extend OriginalTokenPrivEnabled = toint(AdditionalFields.OriginalTokenPrivEnabled)
    // Value for SeDebugPrivilege is 2**20 = 0x100000.
    // Refer to https://downloads.volatilityfoundation.org//omfw/2012/OMFW2012_Gurkok.pdf for numeric values for privileges.
    | extend DebugPrivCurrent = binary_and(CurrentTokenPrivEnabled,SeDebugPrivilege) == SeDebugPrivilege
    | extend DebugPrivOrig = binary_and(OriginalTokenPrivEnabled,SeDebugPrivilege) == SeDebugPrivilege
    // Check for processes that have debug privilege after the event, but did not have it before.
    | where not(DebugPrivOrig) and DebugPrivCurrent
    | extend CleanCmdLine = parse_command_line(InitiatingProcessCommandLine, "windows")
    | where not(InitiatingProcessFileName =~ "tasklist.exe" and CleanCmdLine has_any ("/m", "-m"))
    | project-reorder Timestamp, DeviceId, InitiatingProcessFileName
    // Begin client-specific filter.
    // End client-specific filter.