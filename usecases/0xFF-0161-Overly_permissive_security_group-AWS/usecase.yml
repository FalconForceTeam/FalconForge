name: Overly permissive security group
id: 0xFF-0161-Overly_permissive_security_group-AWS
tags:
  - AWS
  - SuspiciousBehavior
  - Untuned
os_family:
  - N/A
fp_rate: High
severity: Medium
attack:
  - {tactic: 'TA0005', technique: T1562, sub_technique: "007"}
data_sources:
  - provider: AWS
    event_id: AuthorizeSecurityGroupIngress
    table_name: AWSCloudTrail
    attack_data_source: Cloud Service
    attack_data_component: Cloud Service Modification
permission_required: User
technical_description: >
  This query detects someone setting a security group with inbound rules allowing 0.0.0.0 or a subnet less than or equal
  to /16. It does it similarly with ipv6.
description: >
  An attacker on AWS might want to obtain access to a machine via SSH, RDP or another management protocol. Since properly configured
  servers are not internet-reachable, attackers have been observed to allow-list a very large range to provide themselves
  access to the resource.
considerations: >
  This rule only works for organizations which adhere to a strict policy with regards to "least privilege" access.
false_positives: >
  This rule can trigger a significant number of false positives. It's necessary to tune this rule per organization to ensure that it
  matches the organization-specific modus operandi with regards to security groups.
blindspots: >
  None known.
response_plan: >
  Confirm if the user has indeed created an overly broad security group rule.
references: []
change_log:
  - {version: '1.3', date: '2022-08-25', impact: minor, message: Entity mapping added.}
  - {version: '1.2', date: '2022-02-22', impact: minor, message: 'Use ingestion_time for event selection and include de-duplication logic.' }
  - {version: '1.1', date: '2022-02-01', impact: minor, message: Add alerting based on cidrIp as well.}
  - {version: '1.0', date: '2021-08-12', impact: major, message: Initial version.}
detection_query:
  language: Kusto
  platform: Sentinel
  deployment_variables:
    query_frequency: PT1H
    query_period: PT2H
    entity_mapping:
      - Account:
          Name: UserAccount
  query: |
    let timeframe = 2*1h;
    AWSCloudTrail
    | where ingestion_time() >= ago(timeframe)
    | where EventName =~ "AuthorizeSecurityGroupIngress"
    | distinct *
    | extend RequestParameters=parse_json(RequestParameters)
    | extend ipPermissionsItems = RequestParameters.ipPermissions.items
    | mv-expand ipPermissionsItems
    | mv-expand ipPermissionsItems.ipRanges.items, ipPermissionsItems.ipv6Ranges.items
    | parse ipPermissionsItems_ipRanges_items.cidrIp with ipprefix:string "/" iprange:int
    | parse ipPermissionsItems_ipv6Ranges_items.cidrIpv6 with ipv6prefix:string "/" ipv6range:int
    | parse RequestParameters.cidrIp with cidripprefix:string "/" cidriprange:int
    | where ipprefix =~ "0.0.0.0" or iprange <= 16
      or ipv6prefix =~ "::" or ipv6range <= 64
      or cidripprefix =~ "0.0.0.0" or cidriprange <= 16
    | extend SecurityGroupId = RequestParameters.groupId
    // Begin client-specific filter.
    // End client-specific filter.
    | extend UserAccount=tostring(split(UserIdentityArn, "/")[-1])

