name: AWS Resource Shared with Unknown External Account
id: 0xFF-0236-Resource_Shared_with_Unknown_External_Account-AWS
tags:
  - AWS
  - SuspiciousBehavior
os_family:
  - N/A
fp_rate: Low
severity: Medium
attack:
  - {tactic: 'TA0003', technique: T1098, sub_technique: "001"}
  - {tactic: 'TA0009', technique: T1530}
data_sources:
  - provider: AWS
    event_id: ModifyImageAttribute
    table_name: AWSCloudTrail
    attack_data_source: Application Log
    attack_data_component: Application Log Content
  - provider: AWS
    event_id: ModifySnapshotAttribute
    table_name: AWSCloudTrail
    attack_data_source: Application Log
    attack_data_component: Application Log Content
  - provider: AWS
    event_id: ModifyDBSnapshotAttribute
    table_name: AWSCloudTrail
    attack_data_source: Application Log
    attack_data_component: Application Log Content
  - provider: AWS
    event_id: PutBucketPolicy
    table_name: AWSCloudTrail
    attack_data_source: Application Log
    attack_data_component: Application Log Content
permission_required: User
technical_description: >
  This query searches for resources being shared with an external AWS account that is not on a list of known trusted accounts.
description: >
  When an attacker gains access to an account with access to AWS, they might abuse that account to share resources with an external account
  to extract data or to leave a backdoor that can be used at a later stage to re-gain access to the environment.
considerations: >
  None.
false_positives: >
  There might be sharing of resources with external accounts for business reasons. Such sharing will have to be filtered.
blindspots: >
  None known.
response_plan: >
  Confirm if the user responsible for the sharing has shared the resource for a valid business reason.
references:
  - https://github.com/DataDog/stratus-red-team
change_log:
  - {version: '1.2', date: '2022-08-31', impact: minor, message: Entity mapping added.}
  - {version: '1.1', date: '2022-02-22', impact: minor, message: 'Use ingestion_time for event selection and include de-duplication logic.' }
  - {version: '1.0', date: '2022-02-01', impact: major, message: Initial version.}
detection_query:
  language: Kusto
  platform: Sentinel
  deployment_variables:
    query_frequency: PT1H
    query_period: PT2H
    entity_mapping:
      - Account:
          Name: UserAccount
  query: |
    let timeframe = 2*1h;
    let TrustedAccounts= dynamic([]);
    let SharingEvents=(
        AWSCloudTrail
        | where ingestion_time() >= ago(timeframe)
        | where EventName in ("ModifyImageAttribute","ModifySnapshotAttribute","ModifyDBSnapshotAttribute","PutBucketPolicy")
            or (EventSource == "lambda.amazonaws.com" and EventName startswith "AddPermission")
    );
    let ImageSharing=(
        SharingEvents
        | where EventName == "ModifyImageAttribute"
        | mv-expand LaunchPermission=parse_json(RequestParameters).launchPermission
        | mv-expand AddItem=LaunchPermission.add.items
        | extend AddedAccount=AddItem.userId
    );
    let SnapshotSharing=(
        SharingEvents
        | where EventName == "ModifySnapshotAttribute"
        | mv-expand CreateVolumePermission=parse_json(RequestParameters).createVolumePermission
        | mv-expand AddItem=CreateVolumePermission.add.items
        | extend AddedAccount=AddItem.userId
    );
    let DBSnapshotSharing=(
        SharingEvents
        | where EventName == "ModifyDBSnapshotAttribute"
        | where parse_json(RequestParameters).attributeName =~ "restore"
        | mv-expand AddedAccount=parse_json(RequestParameters).valuesToAdd
    );
    let BucketSharing=(
        SharingEvents
        | where EventName == "PutBucketPolicy"
        | extend BucketPolicy=parse_json(RequestParameters).bucketPolicy
        | mv-expand  Statement=BucketPolicy.Statement
        | where Statement.Effect =~ "Allow"
        | mv-expand AddedAccount=Statement.Principal.AWS
    );
    let LambdaSharing=(
        SharingEvents
        | where EventName startswith "AddPermission"
        | extend RequestParameters=parse_json(RequestParameters)
        | where RequestParameters.action == "lambda:InvokeFunction"
        | extend AddedAccount=RequestParameters.principal
    );
    union ImageSharing, SnapshotSharing, DBSnapshotSharing, BucketSharing, LambdaSharing
    | extend AddedAccount=iif(AddedAccount contains "*", "*", AddedAccount)
    | extend AddedAccount=iif(AddedAccount startswith "arn:", split(AddedAccount, ":")[4], AddedAccount)
    | where not(isempty(AddedAccount))
    | where not(AddedAccount == UserIdentityAccountId)
    | where not(AddedAccount in (TrustedAccounts))
    | order by TimeGenerated asc
    // Begin client-specific filter.
    // End client-specific filter.
    | extend UserAccount=tostring(split(UserIdentityArn, "/")[-1])