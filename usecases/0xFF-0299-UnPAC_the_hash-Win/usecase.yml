name: UnPAC the hash
id: 0xFF-0299-UnPAC_the_hash-Win
tags:
  - ActiveDirectory
  - SuspiciousBehavior
os_family:
  - WindowsEndpoint
  - WindowsServer
fp_rate: Low
severity: Medium
attack:
  - {tactic: 'TA0005', technique: T1550, sub_technique: "003"}
  - {tactic: 'TA0006', technique: T1558, sub_technique: "002"}
data_sources:
  - provider: SecurityEvents
    event_id: '4769'
    table_name: SecurityEvent
    attack_data_source: Active Directory
    attack_data_component: Active Directory Credential Request
permission_required: User
technical_description: >
  This query looks for an attack that allows an attacker with a valid TGT token for a certain account, to obtain the NTLM hash for that account.
  Such an account may either be a user account or a machine account. The TGT can, for example, be obtained by authenticating
  with a certificate instead of with username and password.
description: >
  This query works by identifying TGS requests with KDC options that don't occur in normal AD environments. This detection
  looks for TGS requests where the KDC options `Renewable`, `Forwardable`, `Renewable_ok` and `Enc_tkt_in_skey` are set.
  This combination of options is unique for Certipy, Rubeus and Kekeo. More tools inspired by the implementation of these
  tools likely use the same options. The detection checks the presense of these 4 options, regardless which other options
  are set.
considerations: |
  Rubeus and Certipy also set the `Canonicalize` options, besides the earlier mentioned options. Since we want our coverage to be
  as broad as possible, we don't check for this KDC option. However, if this detection gives too many false positives in
  an environment, you can consider to check for the presence of `Canonicalize` as well.
false_positives: >
  No false positives observed.
blindspots: >
  Other tools with similar behavior, but less KDC options set, might slip through this rule. We haven't researched what the
  minimum set of KDC options is required to receive the correct information to unPAC-the-hash.
response_plan: >
  Consider the account for which this rule triggered compromised. An attacker has access to the NTLM hash. For compromised
  machine accounts, it's unlikely that an attacker would be able to crack it. However, an attacker can use this hash to
  create local admin passwords for that machine at will.

  For a normal user account which triggers this rule, consider the account compromised and stop using the account. Consider
  the ups and downs of keeping the account active vs blocking the account. The latter is usually a sufficient sign to an
  attacker that he/she has been caught. Choose strategically whether you want to share this insight with an attacker.
references:
  - https://www.ietf.org/rfc/rfc4120.txt
  - https://www.thehacker.recipes/ad/movement/kerberos/unpac-the-hash
  - https://www.dsinternals.com/wp-content/uploads/eu-19-Grafnetter-Exploiting-Windows-Hello-for-Business.pdf
  - https://dirkjanm.io/ntlm-relaying-to-ad-certificate-services/
change_log:
  - {version: '1.0', date: '2022-06-17', impact: major, message: Initial version.}
detection_query:
  language: Kusto
  platform: Sentinel
  deployment_variables:
    query_frequency: PT1H
    entity_mapping:
      - Host:
          FullName: Computer
      - Account:
          FullName: TargetUserName
  query: |
    let timeframe = 2*1h;
    let forwardable = binary_shift_left(1, 30);
    let renewable = binary_shift_left(1, 23);
    let renewable_ok = binary_shift_left(1, 4);
    let enctik = binary_shift_left(1, 3);
    let krbflags = binary_or(forwardable, binary_or(renewable, binary_or(renewable_ok, binary_or(enctik, 0))));
    SecurityEvent
    | where ingestion_time() >= ago(timeframe)
    | where EventID == 4769
    | extend ticketOptions = toint(extract("<Data Name=\"TicketOptions\">(.*?)</Data>", 1, EventData))
    | extend TargetUserName = extract("<Data Name=\"TargetUserName\">(.*?)@.*?</Data>", 1, EventData)
    | extend ServiceName = extract("<Data Name=\"ServiceName\">(.*?)</Data>", 1, EventData)
    | where ServiceName =~ TargetUserName // Requirement for getting the NT hash with U2U. This makes the KDC encrypt the NT hash with the key in the TGT.
    | where binary_and(ticketOptions, krbflags) == krbflags
    // Begin client-specific filter.
    // End client-specific filter.
